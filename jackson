#!/bin/bash

# +----------------------------------------------------------------------+
# |                                                                      |
# |       _                      _   __  __                              |
# |      | |                    | | |  \/  |                             |
# |      | |_   _ _ __   ___  __| | | \  / | ___ _ __ ___   ___  _ __    |
# |  _   | | | | | '_ \ / _ \/ _` | | |\/| |/ _ \ '_ ` _ \ / _ \| '_ \   |
# | | |__| | |_| | | | |  __/ (_| | | |  | |  __/ | | | | | (_) | | | |  |
# |  \____/ \__,_|_| |_|\___|\__,_| |_|  |_|\___|_| |_| |_|\___/|_| |_|  |
# |                                                                      |
# | Author : Juned Memon            Email : junedm@tipsntraps.com        |
# +----------------------------------------------------------------------+

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

# +----------------------------------------------------------------------+
# jackson - This will work along with `james`, parse the information provided by it and will generate the check_mk configuration files automatically

# +----------------------------------------------------------------------+

## variable initialization
   ME="nagaxy"
   dbg=''          # debug flag
   nagios=''       # nagios flag
   action=''       # action directing nagaxy's work
   corespec=''     # "nagified" galaxy core specification (no glob)
   corespecs=''    # "nagified" galaxy core specifications (no glob)
   explicitcore=0  # Whether to use the explicit core or not. Default to 0 for wildcard.
   nagxndir='/omd/sites/ningxno/etc/check_mk/conf.d/galaxy'     # nagios core cofiguration file directory
   nagxnmk=''     # nagios core configuration file
   nagxntcfg='/omd/sites/ningxno/tmp/nagios/tmp'    # temporary nagios core comfiguration file (generated by nagaxy)
   outdatedc=''    # a varible where list of outdated nagios core config is kept (critical)
   outdatedw=''    # a varible where list of outdated nagios core config is kept (warning)
   xnenv=`glxsh`

   TAG_PATH='/omd/sites/ningxno/etc/check_mk/conf.d/core-tag.txt' 
   HEADER="all_hosts = all_hosts + ["
   FOOTER="]"

   RUBY=`which ruby`
   GALAXY=`which galaxy`
   MOVE=`which mv`
   
   umask 0002

## function initialization
   function _nagaxyGen {
   local  corespec=$1
    [ -z "$corespec" ] && return 3

        if [ "$corespec" = "hostdown" ];then
        $RUBY $GALAXY show | grep unknown | grep -v dummy | grep snv| awk '{print $1,$5,$2}' |awk -F '[.|/| ]' '{ print $1"|"$4"|"$NF}' >/tmp/.nagaxy.galaxy.show
        TAG=$(cat $TAG_PATH | grep -w ^$corespec | awk -F: '{print $2}')
 echo $HEADER ; for i in $(cat /tmp/.nagaxy.galaxy.show ); do  echo "'$i|$TAG',"; done ; echo "$FOOTER"
         return 0
    fi
    
 
  if [ ${explicitcore} -gt 0 ]; then

              [ "$dbg" ] && echo "$ME: debug:       running \"galaxy -t $corespec show\"" >&2
	      $RUBY $GALAXY -t $corespec show | grep running | sort -k 1 | awk '{print $1,$2}' | awk -F '[.|/]' '{ if ($NF ~ /aclu/ ) { print $1"|"$NF } else {print $1}}' >/tmp/.nagaxy.galaxy.show
     else

              [ "$dbg" ] && echo "$ME: debug:       running \"galaxy -t $corespec.* show\"" >&2
              $RUBY $GALAXY -t "$corespec.*" show | grep running | sort -k 1 | awk '{print $1,$2}' | awk -F '[.|/]' '{ if ($NF ~ /aclu/ ) { print $1"|"$NF } else {print $1}}' >/tmp/.nagaxy.galaxy.show
    fi
   
    TAG=$(cat $TAG_PATH | grep -w ^$corespec | awk -F: '{print $2}')
    echo $HEADER ; for i in $(cat /tmp/.nagaxy.galaxy.show ); do  echo "'$i|$TAG',"; done ; echo "$FOOTER"
    if [ $? -eq 0 ]; then 
    	 return 0
    else
         return 1
    fi


}


## process cli options and arguments
   opt=''
   OPTIND=1
   OPTARG=''
   while getopts ":dnx:" opt; do
      case $opt in
         'd') dbg=1
              ;;
         'n') nagios=1
              exec 2>/omd/sites/ningxno/tmp/nagios/tmp/nagaxy.err
              [ "$dbg" ] && echo "$ME: debug: nagios enabled." >&2
              ;;
         'x') xnenv=$OPTARG
              ;;
         *)   echo "$ME: error: invalid command line arguments"
              exit 3
              ;;
      esac
   done

   shift $(($OPTIND - 1))                  # dump cli options

## argument sanity and setup
   if [ $# -lt 1 ]; then
      echo "$ME: error: invalid number of arguments: requires <action> [<corespec>]" >&2 && exit 1
   else
      [ -z "$xnenv" ] && echo "$ME: error: no XNenv selected" >&2 && exit 3
      glxsh $xnenv > /dev/null && [ "$dbg" ] && echo "$ME: debug: xnenv is $xnenv" >&2
      nagxndir=$nagxndir && [ "$dbg" ] && echo "$ME: debug: nagios mk directory: $nagxndir" >&2
      [ ! -d "$nagxndir" ] && echo "$ME: error: cannot access $nagxndir" >&2 && exit 3

      action=$1 && shift && [ "$dbg" ] && echo "$ME: debug: action is $action" >&2
      [ "$action" = 'gen' -a `/usr/bin/id -u` != '0' ] && echo "$ME: error: only root can generate nagios core configuration files" >&2 && exit 3
      corespecs=$@
      if [ "$corespecs" = "ALL" -o -z "$corespecs" -a $action = "audit" ]; then
         cd $nagxndir
         corespecs=''
         filelist=`ls *.mk`
         #filelist=`ls *.mk`
         for file in $filelist; do
            corespec=${file%\.mk} 
            #corespec=${file%\.mk} && corespec=${corespec//\./\/}
            corespecs="$corespecs $corespec"
         done
      fi
      [ "$dbg" ] && echo "$ME: debug: corespecs is $corespecs" >&2
   fi

## do work
   if cd $nagxndir>/dev/null 2>&1; then
      for corespec in $corespecs; do
         [ "$dbg" ] && echo "$ME: debug: -- processing corespec $corespec" >&2

         nagxnmk=$nagxndir/${corespec//\//\.}.mk && [ "$dbg" ] && echo "$ME: debug:    nagios $corespec configuration file: $nagxnmk" >&2
         [ ! -r "$nagxnmk" ] && echo "$ME: warning: nagios $corespec configuration file does not exist; skipped" >&2 && echo "$ME: debug: -- finished processing corespec $corespec" >&2 && continue
        # Let's figure out whether there are risks for dups...
         nagxnmkdupchk=`ls ${nagxndir}/ | grep -vi ${nagxnmk} | grep -ic "^${corespec}"`
         explicitcore=0  # Whether to use the explicit core or not. Default to 0 for wildcard.
         if [ ${nagxnmkdupchk} -gt 1 ]; then
                # There is more than one coretype that will match up against the corespec.
                # Using a non-wildcard method.
                explicitcore=1
         fi
         nagxnmk_md5="$nagxndir/.md5/${corespec//\//\.}.mk.md5" && [ "$dbg" ] && echo "$ME: debug:    nagios $corespec configuration md5 file: $nagxnmk_md5" >&2
         tnagxnmk_md5="$nagxntcfg/${corespec//\//\.}.mk.md5" && [ "$dbg" ] && echo "$ME: debug:    temporary nagios $corespec configuration md5 file: $tnagxnmk_md5" >&2
         tnagxnmk="$nagxntcfg/${corespec//\//\.}.mk" && [ "$dbg" ] && echo "$ME: debug:    temporary nagios $corespec configuration file: $tnagxnmk" >&2


         case "$action" in

              'gen')   tnagxnmk=/omd/sites/ningxno/tmp/nagios/tmp/${corespec//\//\.}.mk && [ "$dbg" ] && echo "$ME: debug:    temporary nagios $corespec configuration file: $tnagxnmk" >&2
                       tnagxnmk_md5=/omd/sites/ningxno/tmp/nagios/tmp/${corespec//\//\.}.mk.md5 && [ "$dbg" ] && echo "$ME: debug:    temporary nagios $corespec configuration md5 file: $tnagxnmk_md5" >&2
                       if _nagaxyGen $corespec >$tnagxnmk; then
                          [ "$dbg" ] && echo "$ME: debug:    generated nagios $corespec configuration in $tnagxnmk" >&2
                          if [ -s $tnagxnmk ]; then
                             [ "$dbg" ] && echo "$ME: debug: `ls -l $tnagxnmk`" >&2
                             if  md5sum $tnagxnmk | awk '{print $1}' > $tnagxnmk_md5; then
                                [ "$dbg" ] && echo "$ME: debug:    generated nagios $corespec configuration md5 signature ($tnagxnmk_md5)" >&2
                                if $MOVE $tnagxnmk $nagxnmk && $MOVE $tnagxnmk_md5 $nagxnmk_md5; then
                                   [ "$dbg" ] && echo "$ME: debug:    moved files into nagios configuration directory" >&2
                                else
                                   echo "$ME: error: failed to mv $tnagxnmk to $nagxnmk" >&2
                                   exit 3
                                fi
                             else
                                echo "$ME: error: failed to generate md5 signature for $tnagxnmk" >&2
                                exit 3
                             fi
                          else
                             echo "$ME: error: nagaxy generated an empty nagios $corespec configuration file ($tnagxnmk)" >&2
                             exit 3
                          fi
                       else
                          echo "$ME: error: failed to generate nagios configuration file from galaxy" >&2
                          exit 3
                       fi
                       ;;

              'audit') # The "audit" command compares three components of the configuration:
                       #  1) the running cores as shows by galaxy
                       #  2) the md5 checksum generated by <nagaxy gen>
                       #  3) the md5 checksum of the current configuration file
                       # A fourth element should problably be included in the mix: the actual running configuration
                       # (which is found in the nagios status.dat file), but that requires more complex parsing, so
                       # it is left as an exercise for the reader.
                       tnagxnmk="$nagxntcfg/${corespec//\//\.}.mk" && [ "$dbg" ] && echo "$ME: debug:    temporary nagios $corespec configuration file: $tnagxnmk" >&2
                       tnagxnmk_md5="$nagxntcfg/${corespec//\//\.}.mk.md5" && [ "$dbg" ] && echo "$ME: debug:    temporary nagios $corespec configuration md5 file: $tnagxnmk_md5" >&2
                       if [ -r $nagxnmk_md5 ] ; then
                          [ "$dbg" ] && echo "$ME: debug:    comparing stored nagios $corespec configuration file signature with actual signature" >&2
                          if [ ` md5sum $nagxnmk | awk '{print $1}'` == `cat $nagxnmk_md5` ]; then
                             [ "$dbg" ] && echo "$ME: debug:    nagios $corespec configuration file signature verified" >&2
                          else
                             echo "$ME: error: nagios $corespec configuration file has changed outside nagaxy control" >&2
                             [ "$dbg" ] &&  md5sum  $nagxnmk
                             [ "$dbg" ] && cat $nagxnmk_md5
                             outdatedw="$outdatedw $corespec"
                          fi


                          [ "$dbg" ] && echo "$ME: debug:    comparing $corespec galaxy configuration signature with stored signature" >&2
                          if _nagaxyGen $corespec >$tnagxnmk; then
                             [ "$dbg" ] && echo "$ME: debug:    generated nagios $corespec configuration in $tnagxnmk" >&2
                             if md5sum $tnagxnmk |  awk '{print $1}' >$tnagxnmk_md5; then
                                [ "$dbg" ] && echo "$ME: debug:    generated nagios $corespec configuration md5 signature ($tnagxnmk_md5)" >&2
                                if [ `cat $nagxnmk_md5` = `cat $tnagxnmk_md5` ]; then
                                   [ "$dbg" ] && echo "$ME: debug:    $corespec galaxy/stored md5 signatures match" >&2
                                else
                                   echo "$ME: error: nagios $corespec configuration md5 signatures do not match" >&2
                                   outdatedc="$outdatedc $corespec"
                                fi
                             else
                               echo "$ME: error: unable to generate $corespec configuration md5 signature" >&2
                               exit 3
                             fi
                          else
                             echo "$ME: error: failed to generate nagios configuration file from galaxy" >&2
                             exit 3
                          fi

                          rm -f $tnagxnmk $tnagxnmk_md5 >/dev/null 2>&1
                       else
                         echo "$ME: error: missing $corespec configuration md5 signature" >&2
                       fi
                       ;;
         esac
      [ "$dbg" ] && echo "$ME: debug: -- finished processing corespec $corespec" >&2
      done
   else
      echo "$ME: error: inaccesible nagios core cofiguration file directory" >&2
      exit 3
   fi

## report
   case "$action" in
        'gen')   ;;
        'audit') if [ ! -z "$nagios" ]; then
                    if [ ! -z "$outdatedc" ]; then
                        echo "STATUS: galaxy/nagios core config mismatch:$outdatedc"
                        exit 2
                     elif [ ! -z "$outdatedw" ]; then
                        echo "STATUS: nagios core config changed:$outdatedw"
                        exit 1
                     else
                        echo "STATUS: nagios core configuration is up to date"
                        exit 0
                     fi
                 fi
                 ;;
   esac
